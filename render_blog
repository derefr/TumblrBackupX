#!/usr/bin/env ruby

ResourceFiles = ['blog.css', 'blog.js']

require 'haml'
require 'json'
require 'fileutils'
require 'rest-client'
require 'digest'

unless ARGV.length >= 2
  puts "usage: #{$0} <tumblr-blog.json> <chapter-1-name> [chapter-2-tag-name] .. [chapter-N-tag-name]"
  exit 1
end

tumblr = JSON.parse( File.read( ARGV.shift ) )
Blog = tumblr['blog']
Posts = tumblr['posts'].reverse
ChapterTags = ARGV.map{ |x| x }


Posts.each_with_index{ |po, i| po['index'] = i + 1 }

PostsByTumblrId = {}
Pages = Hash.new{ |h,k| h[k] = [] }
PhotoCache = {}

Posts.each do |po|
  po['page'] = (po['tags'] & ChapterTags).first
  po['permalink'] = po['page'] + '/#post-' + po['index'].to_s
  Pages[po['page']] << po
  PostsByTumblrId[po['id']] = po
end

LocalLinkPattern = Regexp.new("['\"]" + Blog['url'].gsub('/', '\\/').gsub('.', '\\.') + "[^'\"]+['\"]")
ImageSrcPattern = /src=['\"][^'\"]+['\"]/

class HelperScope
  def replace_links(html)
    html = html.gsub(LocalLinkPattern) do |local_link|
      link_content = local_link[1..-2]
      relative_link = link_content[Blog['url'].length .. -1]
      link_parts = relative_link.split('/')

      case link_parts.first
      when 'post'
        new_link = '../' + PostsByTumblrId[link_parts[1].to_i]['permalink']
      when 'tagged'
        new_link = '../' + link_parts[1].split('?')[0] + '/'
      end

      "'" + new_link + "'"
    end
  
    html = html.gsub(ImageSrcPattern) do |photo_uri|
      photo_uri = photo_uri[5..-2]
      'src="' + download_image(photo_uri) + '"'
    end
    
    html
  end
  
  def download_image(photo_uri)
    return PhotoCache[photo_uri] if PhotoCache.has_key?(photo_uri)
    
    photo_ext = photo_uri.split('/').last.split('.').last.downcase
    unless %w(jpg jpeg png gif).include?(photo_ext)
      photo_ext = "png"
    end

    begin
      photo_data = RestClient.get(photo_uri)
      puts "Retrieving #{photo_uri}..."
      photo_digest = Digest::MD5.hexdigest(photo_data)
      photo_path = Blog['name'] + "/images/" + photo_digest + '.' + photo_ext
      photo_new_uri = "../images/" + photo_digest + '.' + photo_ext
      File.open(photo_path, 'wb'){ |f| f.write(photo_data) }
      PhotoCache[photo_uri] = photo_new_uri
    rescue
      PhotoCache[photo_uri] = photo_uri
    end
  end
end

FileUtils.mkdir_p(Blog['name'])
FileUtils.mkdir_p(Blog['name'] + '/images')
FileUtils.mkdir_p(Blog['name'] + '/speakers')

running_in_directory = File.dirname( File.expand_path(__FILE__) )
ResourceFiles.each do |file|
  FileUtils.cp(running_in_directory + '/' + file, Blog['name'] + '/' + file)
  FileUtils.touch(Blog['name'] + '/customized_' + file)
end

if File.exist?(Blog['name'] + '/photo_cache')
  PhotoCache.update(JSON.parse(File.read(Blog['name'] + '/photo_cache')))
end

def tag_to_name(tag_str)
  words = tag_str.split('-')
  stop_words = %w(of and or the a an is are)
  new_words = words.map{ |w| stop_words.include?(w) ? w : w.capitalize }
  new_words.unshift(new_words.shift.capitalize)
  new_words.join(' ')
end

ChapterPageTemplate = Haml::Engine.new(File.read(running_in_directory + '/chapter.haml'), :format => :html5)
LandingPageTemplate = Haml::Engine.new(File.read(running_in_directory + '/landing.haml'), :format => :html5)

Pages.each do |page_name, posts|
  FileUtils.mkdir_p(Blog['name'] + '/' + page_name)

  File.open(Blog['name'] + '/' + page_name + '/index.html', 'w') do |f|
    f.write( ChapterPageTemplate.render(HelperScope.new,
      :page_name => tag_to_name(page_name),
      :posts => posts
    ))
  end
end

File.open(Blog['name'] + '/index.html', 'w') do |f|
  f.write( LandingPageTemplate.render(HelperScope.new,
    :latest_chapter_name => tag_to_name(ChapterTags.last),
    :latest_post_number => Pages[ChapterTags.last].last['index'],
    :latest_post_permalink => ChapterTags.last + '/#post-' + Pages[ChapterTags.last].last['index'].to_s,
    :first_chapter_permalink => ChapterTags.first + '/',
  ))
end

unless PhotoCache.empty?
  File.open(Blog['name'] + '/photo_cache', 'w'){ |f| f.write(PhotoCache.to_json) }
end
