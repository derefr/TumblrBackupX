#!/usr/bin/env ruby

ResourceFiles = ['blog.css', 'blog.js']

require 'haml'
require 'json'
require 'fileutils'
require 'rest-client'
require 'digest'

unless ARGV.length >= 2
  puts "usage: #{$0} <tumblr-blog.json> <chapter-1-name> [chapter-2-tag-name] .. [chapter-N-tag-name]"
  exit 1
end

tumblr = JSON.parse( File.read( ARGV.shift ) )
Blog = tumblr['blog']
Posts = tumblr['posts'].reverse
ChapterTags = ARGV.map{ |x| x }


Posts.each_with_index{ |po, i| po['index'] = i + 1 }

PostsByTumblrId = {}
Pages = Hash.new{ |h,k| h[k] = [] }
PhotoCache = {}

Posts.each do |po|
  po['page'] = (po['tags'] & ChapterTags).first
  po['permalink'] = po['page'] + '/#' + po['index'].to_s
  Pages[po['page']] << po
  PostsByTumblrId[po['id']] = po
end

LocalLinkPattern = Regexp.new("['\"]" + Blog['url'].gsub('/', '\\/').gsub('.', '\\.') + "[^'\"]+['\"]")
ImageSrcPattern = /src=['\"][^'\"]+['\"]/

template = DATA.read

class HelperScope
  def replace_links(html)
    html = html.gsub(LocalLinkPattern) do |local_link|
      link_content = local_link[1..-2]
      relative_link = link_content[Blog['url'].length .. -1]
      link_parts = relative_link.split('/')

      case link_parts.first
      when 'post'
        new_link = PostsByTumblrId[link_parts[1].to_i]['permalink']
      when 'tagged'
        new_link = '../' + link_parts[1].split('?')[0] + '/'
      end

      "'" + new_link + "'"
    end
  
    html = html.gsub(ImageSrcPattern) do |photo_uri|
      photo_uri = photo_uri[5..-2]
      next( 'src="' + PhotoCache[photo_uri] + '"' ) if PhotoCache.has_key?(photo_uri)

      photo_ext = photo_uri.split('/').last.split('.').last.downcase
      unless %w(jpg jpeg png gif).include?(photo_ext)
        photo_ext = "png"
      end

      begin
        photo_data = RestClient.get(photo_uri)
        puts "Retrieving #{photo_uri}..."
        photo_digest = Digest::MD5.hexdigest(photo_data)
        photo_path = Blog['name'] + "/images/" + photo_digest + '.' + photo_ext
        photo_new_uri = "../images/" + photo_digest + '.' + photo_ext
        File.open(photo_path, 'wb'){ |f| f.write(photo_data) }
        PhotoCache[photo_uri] = photo_new_uri
      rescue
        PhotoCache[photo_uri] = photo_uri
      end
      
      'src="' + PhotoCache[photo_uri] + '"'
    end
    
    html
  end
end

FileUtils.mkdir_p(Blog['name'])
FileUtils.mkdir_p(Blog['name'] + '/images')

running_in_directory = File.dirname( File.expand_path(__FILE__) )
ResourceFiles.each do |file|
  FileUtils.cp(running_in_directory + '/' + file, Blog['name'] + '/' + file)
  FileUtils.touch(Blog[name] + '/customized_' + file)
end


Pages.each do |page_name, posts|
  FileUtils.mkdir_p(Blog['name'] + '/' + page_name)

  File.open(Blog['name'] + '/' + page_name + '/index.html', 'w') do |f|
    f.write( Haml::Engine.new(template, :format => :html5).render(HelperScope.new,
      :page_name => page_name,
      :posts => posts
    ))
  end
end

__END__
!!! 5
%html
  %head
    %meta{:charset => 'utf-8'}
    %title== #{Blog['title']} - ##{page_name}
    %link{:rel => 'Stylesheet', :href => '../blog.css', :type => 'text/css'}
    %link{:rel => 'Stylesheet', :href => '../customized_blog.css', :type => 'text/css'}
  %body
    %header
      %table
        %tr
          %td
            %h1
              = Blog['title']
          %td{:rowspan => 2}
            %img.avatar{:src => '../avatar.png'}
        %tr
          %td
            %h2
              = page_name.tr('-', ' ')
      .toggle-mailbag-blob
        %a.toggle-mailbag-link{:href => '#'} Show only plot-relevant posts
  
    - posts.each do |post|
      %article.post{:class => ['post-' + post['type']] + post['tags'].map{ |t| 'post-tagged-' + t }, :id => 'post-' + post['index'].to_s}
        .post-inner-wrapper
          %a.post-permalink{:href => '#post-' + post['index'].to_s} &#x2605;
          - if post['type'] == 'text'
            - if post['title']
              %header
                %h3= post['title']
            .post-content
              = replace_links(post['body'])
          - if post['type'] == 'chat'
            - if post['title']
              %header
                %h3= post['title']
            .post-dialogue
              - last_speaker = nil
              - is_reply = true
              - post['dialogue'].each do |line|
                - speaker = line['name'].downcase.tr(' ', '-')
                - if (is_new_speaker = (speaker != last_speaker))
                  - last_speaker = speaker
                  - is_reply = (not is_reply)
                %blockquote.post-dialogue-line{:class => ['speaker-' + speaker, is_reply ? 'post-dialogue-reply' : nil].compact}
                  - if File.exist?(Blog['name'] + '/speaker-' + speaker + '.png')
                    %img.speaker-avatar{:src => '../speaker-' + speaker + '.png'}
                  %p= line['phrase']
                  .floatclear
          - if post['type'] == 'photo'
            .post-photoset
              - post['photos'].each do |photo|
                .post-photo
                  %img{:src => photo['original_size']['url']}
                  - if photo['caption'] and not photo['caption'].strip.empty?
                    %p.photo-caption= photo['caption']
            - if post['caption'] and not post['caption'].strip.empty?
              .post-caption.post-content
                = replace_links(post['caption'])
          - if post['type'] == 'answer'
            .post-question-block
              - if post['asking_url']
                %p
                  %a{:href => post['asking_url']}= post['asking_name']
                  asked:
              %blockquote.post-question
                %p= post['question']
            .post-answer.post-content
              = replace_links(post['answer'])

          %ul.post-tags
            - (post['tags'] - ChapterTags - ['mailbag']).each do |tag|
              %li.post-tag= tag
    .final-spacer

    %script{:src => 'http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js'}
    %script{:src => '../blog.js'}
    %script{:src => '../customized_blog.js'}